{"/home/travis/build/npmtest/node-npmtest-stringify/test.js":"/* istanbul instrument in package npmtest_stringify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stringify/lib.npmtest_stringify.js":"/* istanbul instrument in package npmtest_stringify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_stringify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_stringify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-stringify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-stringify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_stringify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_stringify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_stringify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_stringify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_stringify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_stringify.__dirname + '/lib.npmtest_stringify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stringify/node_modules/stringify/index.js":"'use strict';\nmodule.exports = require('./src/stringify');\n","/home/travis/build/npmtest/node-npmtest-stringify/node_modules/stringify/src/stringify.js":"'use strict';\nvar htmlMinifier  = require('html-minifier'),\n    fs            = require('fs'),\n    path          = require('path'),\n    tools         = require('browserify-transform-tools');\n\nvar MINIFY_TRANSFORM_OPTIONS = {\n  includeExtensions: [\n    '.html',\n    '.htm',\n    '.tmpl',\n    '.tpl',\n    '.hbs'\n  ]\n};\n\nvar TRANSFORM_OPTIONS = {\n  includeExtensions: MINIFY_TRANSFORM_OPTIONS.includeExtensions.concat([\n    '.text',\n    '.txt'\n  ])\n};\n\nvar DEFAULT_MINIFY_OPTIONS = {\n  removeComments: true,\n  removeCommentsFromCDATA: true,\n  removeCDATASectionsFromCDATA: true,\n  collapseWhitespace: true,\n  conservativeCollapse: false,\n  preserveLineBreaks: false,\n  collapseBooleanAttributes: false,\n  removeAttributeQuotes: true,\n  removeRedundantAttributes: false,\n  useShortDoctype: false,\n  removeEmptyAttributes: false,\n  removeScriptTypeAttributes: false,\n  removeStyleLinkTypeAttributes: false,\n  removeOptionalTags: false,\n  removeIgnored: false,\n  removeEmptyElements: false,\n  lint: false,\n  keepClosingSlash: false,\n  caseSensitive: false,\n  minifyJS: false,\n  minifyCSS: false,\n  minifyURLs: false\n};\n\nvar NODE_REQUIRE_OPTIONS = {};\n\n/**\n * Stringifies the content\n * @param   {string}    content\n * @returns {string}\n */\nfunction stringify (content) {\n  return 'module.exports = ' + JSON.stringify(content) + ';\\n';\n}\n\n/**\n * Takes a set of user-supplied options, and ensure file configuration\n * settings is in the correct form for 'browserify-transform-tools'.\n * @param   {object | array}    options\n * @returns {object}\n */\nfunction getTransformOptions (options) {\n  if (!options) {\n    return {};\n  }\n\n  if (Object.prototype.toString.call(options) === '[object Array]') {\n    options = { appliesTo: { includeExtensions: options }  };\n  }\n\n  if (options.extensions && !options.appliesTo) {\n    var extensions = options.extensions._ || options.extensions;\n    options.appliesTo = { includeExtensions: extensions };\n    delete options.extensions;\n  }\n\n  return options;\n}\n\n/**\n * Takes a set of user-supplied options, and determines which set of file-\n * extensions to run Stringify on.\n * @param   {object | array}    options\n * @param   {object}            options.extensions\n * @returns {string[]}\n */\nfunction getExtensions (options) {\n  /**\n   * The file extensions which are stringified by default.\n   * @type    {string[]}\n   */\n  var extensions = TRANSFORM_OPTIONS.includeExtensions;\n\n  if (options) {\n    if (Object.prototype.toString.call(options) === '[object Array]') {\n      extensions = options;\n    } else if (options.extensions && options.extensions._) {\n      extensions = options.extensions._;\n    } else if(options.extensions) {\n      extensions = options.extensions;\n    }\n  }\n\n  // Lowercase all file extensions for case-insensitive matching.\n  extensions = extensions.map(function (ext) {\n    return ext.toLowerCase();\n  });\n\n  return extensions;\n}\n\n/**\n * Provides user or default options for html-minifier module\n * @param   {object}    options\n * @returns {object}\n */\nfunction getMinifyOptions (options) {\n  if (!options || !options.minify) {\n    return { requested: false };\n  }\n\n  var minifierOpts = options.minifier,\n      minify = { requested: true, options: DEFAULT_MINIFY_OPTIONS };\n\n  if (options.minifyAppliesTo) {\n    minify.config = { appliesTo: options.minifyAppliesTo };\n  } else if (minifierOpts && minifierOpts.extensions) {\n    var extensions = minifierOpts.extensions._ || options.minifier.extensions;\n    minify.config = { appliesTo: { includeExtensions: extensions } };\n  }\n\n  if (options.minifyOptions) {\n    minify.options = options.minifyOptions;\n  } else if (minifierOpts && minifierOpts.options) {\n    minify.options = minifierOpts.options;\n  }\n\n  return minify;\n}\n\n/**\n * Returns minified contents if requested\n * @param   {string} filename\n * @param   {string} contents\n * @param   {object} options\n * @return  {string}\n */\nfunction minify(filename, contents, options) {\n  var minifier = getMinifyOptions(options);\n\n  if (minifier.requested) {\n    if (!tools.skipFile(filename, minifier.config, MINIFY_TRANSFORM_OPTIONS)) {\n      return htmlMinifier.minify(contents, minifier.options);\n    }\n  }\n\n  return contents;\n}\n\n/**\n * Reads in a file and stringifies and minifies the contents.\n * @param  {string} module\n * @param  {string} filename\n * @return {string}\n */\nfunction requireStringify (module, filename) {\n  var contents;\n\n  try {\n    contents = fs.readFileSync(path.resolve(filename), 'utf8');\n  } catch (error) {\n    throw new Error('Stringify could not find module \\'' + path.resolve(filename) + '\\'.');\n  }\n\n  module.exports = minify(filename, contents, NODE_REQUIRE_OPTIONS);\n}\n\n/**\n * Registers the given extensions with node require.\n * @param  {object | array} options\n * @return {void}\n */\nfunction registerWithRequire (options) {\n  NODE_REQUIRE_OPTIONS = options || {};\n\n  var exts = getExtensions(NODE_REQUIRE_OPTIONS);\n\n  for (var i = 0; i < exts.length; i++) {\n    require.extensions[ exts[i] ] = requireStringify;\n  }\n}\n\n/**\n * Function which is called to do the transform.\n *\n * - `contents` are the contents of the file.\n * - `transformOptions.file` is the name of the file (as would be\n *   passed to a normal browserify transform.)\n * - `transformOptions.config` is the configuration data that has been\n *   automatically loaded.  For details, see the transform configuration documentation\n *   (https://github.com/benbria/browserify-transform-tools/wiki/Transform-Configuration).\n * - `transformOptions.config` is a copy of\n * - `done(err, transformed)` is a callback which must be called, passing a\n *   string with the transformed contents of the file.\n *\n * @param  {string} content\n * @param  {object} transformOptions\n * @param  {function} done\n * @returns {void}\n */\nfunction transformFn (contents, transformOptions, done) {\n  var file = transformOptions.file,\n      options = transformOptions.config;\n\n  done(null, stringify(minify(file, contents, options)));\n}\n\n/**\n * Exposes the Browserify transform function.\n *\n * This handles two use cases:\n * - Factory: given no arguments or options as first argument it returns\n *   the transform function\n * - Standard: given file (and optionally options) as arguments a stream is\n *   returned. This follows the standard pattern for browserify transformers.\n *\n * @param   {string}            file\n * @param   {object | array}    options\n * @returns {stream | function} depending on if first argument is string.\n */\nmodule.exports = function (file, options) {\n  var transform = tools.makeStringTransform('stringify', TRANSFORM_OPTIONS, transformFn);\n\n  if (typeof file !== 'string') {\n    // Factory: return a function.\n    // Set options variable here so it is ready for when browserifyTransform\n    // is called. Note: first argument is the options.\n    var capturedOptions = getTransformOptions(file);\n    return function (file) { return transform(file, capturedOptions); };\n  } else {\n    return transform(file, getTransformOptions(options));\n  }\n};\n\n// exports registerWithRequire so stringify can be registered with node require.\nmodule.exports.registerWithRequire = registerWithRequire;\n\n// Test-environment specific exports...\nif (process.env.NODE_ENV) {\n  module.exports.NODE_REQUIRE_OPTIONS        = NODE_REQUIRE_OPTIONS;\n  module.exports.requireStringify            = requireStringify;\n  module.exports.stringify                   = stringify;\n  module.exports.getExtensions               = getExtensions;\n  module.exports.getTransformOptions         = getTransformOptions;\n  module.exports.TRANSFORM_OPTIONS           = TRANSFORM_OPTIONS;\n  module.exports.minify                      = minify;\n  module.exports.getMinifyOptions            = getMinifyOptions;\n  module.exports.MINIFY_TRANSFORM_OPTIONS    = MINIFY_TRANSFORM_OPTIONS;\n  module.exports.DEFAULT_MINIFY_OPTIONS      = DEFAULT_MINIFY_OPTIONS;\n}\n","/home/travis/build/npmtest/node-npmtest-stringify/node_modules/stringify/gulpfile.js":"'use strict';\nvar gulp          = require('gulp'),\n    jshint        = require('gulp-jshint'),\n    mocha         = require('gulp-mocha'),\n    stylish       = require('jshint-stylish');\n\ngulp.task('lint', function () {\n  return gulp.src([\n      './*.js',\n      './src/**/*.js',\n      './test/**/*.js'\n    ])\n    .pipe(jshint())\n    .pipe(jshint.reporter(stylish))\n    .pipe(jshint.reporter('fail'));\n});\n\ngulp.task('test', function () {\n  process.env.NODE_ENV = true;\n\n  return gulp.src('./src/**/*.js')\n    .on('finish', function () {\n      return gulp.src('./test/**/*.js', {\n        read: false\n      })\n      .pipe(mocha({\n        reporter: 'spec'\n      }));\n    });\n});\n"}